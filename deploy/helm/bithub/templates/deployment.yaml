---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bithub.name" . }}-{{ .Values.designDomain.name }}
  labels:
    {{- include "bithub.labels" . | nindent 4 }}
    component: {{ .Values.designDomain.name | quote }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "bithub.selectorLabels" . | nindent 6 }}
      component: {{ .Values.designDomain.name | quote }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "bithub.selectorLabels" . | nindent 8 }}
        component: {{ .Values.designDomain.name | quote }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bithub.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: s3fs-setup
          configMap:
            name: {{ include "bithub.name" . }}
            defaultMode: 0755
        - name: s3fs-cache
          emptyDir: {}
        - name: s3fs-cache-scope
          emptyDir: {}
        - name: share-scope
          emptyDir: {}
        - name: s3fs-cache-image
          emptyDir: {}
        - name: share-image
          emptyDir: {}
      initContainers:
        - name: s3fs-init
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.s3fs.repository }}:{{ .Values.image.s3fs.tag }}"
          imagePullPolicy: {{ .Values.image.s3fs.pullPolicy }}
          args:
            - "/scripts/s3fs-setup.sh"
          env:
            - name: DOMAIN
              value: {{ .Values.designDomain.name }}
            - name: AWS_S3_URL
              value: {{ .Values.bucket.endpoint }}
            - name: AWS_S3_BUCKET
              value: {{ .Values.bucket.name }}
            - name: AWS_S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucket.secretName }}
                  key: {{ .Values.bucket.accessIdKey }}
            - name: AWS_S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucket.secretName }}
                  key: {{ .Values.bucket.accessSecretKey }}
          volumeMounts:
            - name: s3fs-setup
              mountPath: /scripts/s3fs-setup.sh
              subPath: s3fs-setup.sh
            - name: s3fs-cache
              mountPath: /opt/s3fs/bucket
              mountPropagation: Bidirectional
      containers:
        - name: s3fs-sidecar-bitserver
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.s3fs.repository }}:{{ .Values.image.s3fs.tag }}"
          imagePullPolicy: {{ .Values.image.s3fs.pullPolicy }}
          env:
            - name: DOMAIN
              value: {{ .Values.designDomain.name }}
            - name: AWS_S3_BUCKET_BASE
              value: {{ .Values.bucket.name }}
            - name: AWS_S3_URL
              value: {{ .Values.bucket.endpoint }}
            - name: AWS_S3_BUCKET
              value: $(AWS_S3_BUCKET_BASE):/$(DOMAIN)/scope
            - name: AWS_S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucket.secretName }}
                  key: {{ .Values.bucket.accessIdKey }}
            - name: AWS_S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucket.secretName }}
                  key: {{ .Values.bucket.accessSecretKey }}
          volumeMounts:
            - name: s3fs-cache-scope
              mountPath: /opt/s3fs/bucket
              mountPropagation: Bidirectional
            - name: share-scope
              mountPath: /share
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    sleep 100;
                    until healthcheck.sh; do
                      echo wait for s3fs mount;
                      sleep 1;
                    done
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    until [ -f "/share/term" ]; do
                      echo wait for bit server stop;
                      sleep 1;
                    done
                    sleep 10;
                    rm -rf /share/term;
        - name: bitserver
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.bitserver.repository }}:{{ .Values.image.bitserver.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.bitserver.pullPolicy }}
          env:
          - name: SCOPE
            value: {{ .Values.designDomain.name }}
          - name: SCOPE_REMOTES
            value:
              {{- $remotes := list -}}
              {{- range .Values.designDomain.dependencies -}}
              {{- $remotes = append $remotes (printf "%s@https://%s.%s" . . $.Values.gateway.host) -}}
              {{- end -}}
              {{ printf " %s" (join "," $remotes) }}
          ports:
            - name: scope
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            - name: s3fs-cache-scope
              mountPath: /root/{{ .Values.designDomain.name }}
              mountPropagation: Bidirectional
            - name: share-scope
              mountPath: /share
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    trap "touch /share/term" INT;
                    trap "touch /share/term" TERM;
          startupProbe:
            failureThreshold: 60
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: scope
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 60
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: scope
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 60
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: scope
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
        - name: s3fs-sidecar-easyimage
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.s3fs.repository }}:{{ .Values.image.s3fs.tag }}"
          imagePullPolicy: {{ .Values.image.s3fs.pullPolicy }}
          env:
            - name: DOMAIN
              value: {{ .Values.designDomain.name }}
            - name: AWS_S3_BUCKET_BASE
              value: {{ .Values.bucket.name }}
            - name: AWS_S3_URL
              value: {{ .Values.bucket.endpoint }}
            - name: AWS_S3_BUCKET
              value: $(AWS_S3_BUCKET_BASE):/$(DOMAIN)/image
            - name: AWS_S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucket.secretName }}
                  key: {{ .Values.bucket.accessIdKey }}
            - name: AWS_S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucket.secretName }}
                  key: {{ .Values.bucket.accessSecretKey }}
          volumeMounts:
            - name: s3fs-cache-image
              mountPath: /opt/s3fs/bucket
              mountPropagation: Bidirectional
            - name: share-image
              mountPath: /share
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    until healthcheck.sh; do
                      echo wait for s3fs mount;
                      sleep 1;
                    done
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    until [ -f "/share/term" ]; do
                      echo wait for bit server stop;
                      sleep 1;
                    done
                    sleep 10;
                    rm -rf /share/term;
        - name: easyimage
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.easyimage.repository }}:{{ .Values.image.easyimage.tag }}"
          imagePullPolicy: {{ .Values.image.easyimage.pullPolicy }}
          env:
          - name: TZ
            value: Asia/Shanghai
          - name: DEBUG
            value: "true"
          ports:
            - name: image
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: s3fs-cache-image
              mountPath: /app/web/config
              subPath: config
              mountPropagation: Bidirectional
            - name: s3fs-cache-image
              mountPath: /app/web/i
              subPath: i
              mountPropagation: Bidirectional
            - name: share-image
              mountPath: /share
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    trap "touch /share/term" INT;
                    trap "touch /share/term" TERM;
          livenessProbe:
            httpGet:
              path: /
              port: image
          readinessProbe:
            httpGet:
              path: /
              port: image
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

{{- range .Values.domains }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bithub.name" $ }}-{{ .name }}
  labels:
    {{- include "bithub.labels" $ | nindent 4 }}
    component: {{ .name | quote }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "bithub.selectorLabels" $ | nindent 6 }}
      component: {{ .name | quote }}
  template:
    metadata:
      {{- with $.Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "bithub.selectorLabels" $ | nindent 8 }}
        component: {{ .name | quote }}
    spec:
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bithub.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: s3fs-cache
          emptyDir: {}
      initContainers:
        - name: s3fs-init
          volumeMounts:
            - name: s3fs-cache
              mountPath: /data
      containers:
        - name: s3fs
          ecurityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.image.s3fs.repository }}:{{ $.Values.image.s3fs.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.s3fs.pullPolicy }}
          env:
            - name: todo
              value: todo
          volumeMounts:
            - name: s3fs-cache
              mountPath: /data
              mountPropagation: Bidirectional
        - name: bitserver
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.image.bitserver.repository }}:{{ $.Values.image.bitserver.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.bitserver.pullPolicy }}
          env:
          - name: SCOPE
            value: {{ .name }}
          - name: SCOPE_REMOTES
            value:
              {{- $remotes := list -}}
              {{- range .dependencies -}}
              {{- $remotes = append $remotes (printf "%s@https://%s.%s" . . $.Values.gateway.host) -}}
              {{- end -}}
              {{ printf " %s" (join "," $remotes) }}
          ports:
            - name: scope
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            - name: s3fs-cache
              mountPath: /root/data
              mountPropagation: HostToContainer
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml $.Values.resources | nindent 12 }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
        - name: easyimage
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.image.easyimage.repository }}:{{ $.Values.image.easyimage.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.easyimage.pullPolicy }}
          env:
          - name: todo
            value: todo
          ports:
            - name: image
              containerPort: 8000
              protocol: TCP
          volumeMounts:
            - name: s3fs-cache
              mountPath: /root/data
              mountPropagation: HostToContainer
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml $.Values.resources | nindent 12 }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

{{- end }}
